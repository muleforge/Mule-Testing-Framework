<?xml version="1.0" encoding="UTF-8"?>
<!-- TODO: Bring in the file and ftp namespaces and schemas -->
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.2"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:spring="http://www.springframework.org/schema/beans"
       xmlns:stdio="http://www.mulesource.org/schema/mule/stdio/2.2"
       xmlns:file="http://www.mulesource.org/schema/mule/file/2.2"
       xmlns:ftp="http://www.mulesource.org/schema/mule/ftp/2.2"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.mulesource.org/schema/mule/core/2.2 
       http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
       http://www.mulesource.org/schema/mule/file/2.2 
       http://www.mulesource.org/schema/mule/file/2.2/mule-file.xsd
       http://www.mulesource.org/schema/mule/ftp/2.2 
       http://www.mulesource.org/schema/mule/ftp/2.2/mule-ftp.xsd">

<!-- TODO: Create a file connector with the attributes name, and pollingFrequency=2000 -->
<!-- TODO: Don't forget to add an expression filename parser to support our file rename mule expression -->       
<file:connector
	name="FileConnector"
	pollingFrequency="2000" >
	<file:expression-filename-parser/>
</file:connector>

<model name="FileModel">

  <service name="FileService">
	<inbound>
<!-- TODO: Inbound file endpoint with a path of data/in , referencing our file connector-->
<!-- TODO: Add a filename wildcard filter which looks for a patterm of *.xml -->
			<file:inbound-endpoint path="data/in" connector-ref="FileConnector">
				<file:filename-wildcard-filter pattern="*.xml" />
			</file:inbound-endpoint>
	</inbound>
<!-- TODO: Add a bridge component for to improve readability of config file -->
	<bridge-component/>
	<outbound>
<!-- TODO: Create an outbound file endpoint with a path of data/archive and an outputPattern equal to the one presented in the text -->
<!-- TODO: Don't forget the pass through router -->
	   	<pass-through-router>
	    		<file:outbound-endpoint 
	    		    path="data/archive" 
	         		outputPattern="[header:originalFilename]-[function:dateStamp]"/> 
		  </pass-through-router>
	</outbound>
   </service>

<!-- Our ftpInboundService will poll the FTP server and bring the file to provide input to our file endpoint -->
	<service name="ftpInboundService">
      <inbound>
<!-- TODO: Create  an inbound ftp inbound endpoint which uses user=admin, password=admin, host=localhost, port=2001, path=/ -->      
	      <ftp:inbound-endpoint 
			pollingFrequency="5000"		      	
			user="admin" 
			password="admin"
			host="localhost"
			port="2001"
	        path="/" />
      </inbound>
	<bridge-component/>
      <outbound>
<!-- TODO: Create a pass through router -->
<!-- TODO: Create a file outbound endpoint whith a path of data/in and an outputPattern which will preserve the filename as is -->
	      <pass-through-router>
	         <file:outbound-endpoint 
	           path="data/in"
	           outputPattern="[header:originalFilename]"/>
	      </pass-through-router>
      </outbound>
	</service>

</model>

</mule>